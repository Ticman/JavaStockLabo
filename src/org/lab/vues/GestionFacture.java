/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.lab.vues;

import java.awt.print.Printable;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.Query;
import javax.swing.JOptionPane;
import laboprojet.PrintPanel;
import org.lab.dao.Dao;
import org.lab.entites.ClientEntite;
import org.lab.entites.FactureEntite;
import org.lab.entites.FacturerEntite;
import org.lab.entites.ProduitEntite;

/**
 *
 * @author J-P
 */
public class GestionFacture extends javax.swing.JDialog {
   private Dao dao = new Dao();
    private List<ClientEntite> listeclient = new ArrayList<>();
    private List<ProduitEntite> listeproduit = new ArrayList<>();
    ClientEntite client = new ClientEntite();
    Vector vecteur = new Vector();
    Date date1, date2 = new Date();
    private ProduitEntite produit = new ProduitEntite();
    private int pointersurproduit = 0;
    private int pointerclient = 0;
    private SimpleDateFormat formatter = new SimpleDateFormat("yyyy-mm-dd");

    /**
     * Creates new form GestionFacture
     */
    public GestionFacture(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        IHM_JButton_Imprimer.setVisible(false);
        updatecomboclient();
        updatelisteproduit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        IHM_facture = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel2 = new javax.swing.JPanel();
        IHM_NouveauClient = new javax.swing.JButton();
        IHM_comboclient = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        IHM_NouveauProduit = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        IHM_ListeProduit = new javax.swing.JList<String>();
        jLabel2 = new javax.swing.JLabel();
        IHM_Quantitevoulue = new javax.swing.JTextField();
        IHM_JButton_Quantite = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        IHM_DateFacture = new com.toedter.calendar.JDateChooser();
        IHM_JButton_DateFacture = new javax.swing.JButton();
        IHM_gesfact_Total = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        IHM_gesfact_PU = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        IHM_tableau_produit = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        IHM_tab_acheteur = new javax.swing.JTable();
        IHM_JButton_Imprimer = new javax.swing.JButton();
        IHM_JButton_Enregistrer = new javax.swing.JButton();
        IHM_JButton_Nouveau = new javax.swing.JButton();
        IHM_Recu = new javax.swing.JCheckBox();
        IHM_gesfac_Quitter = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        IHM_Menu_Parametre = new javax.swing.JMenu();
        IHM_Menu_Client = new javax.swing.JMenuItem();
        IHM_Menu_Produit = new javax.swing.JMenuItem();
        IHM_Menu_Utiisateur = new javax.swing.JMenuItem();
        IHM_Menu_Quitter = new javax.swing.JMenuItem();
        IHM_Menu_Operation = new javax.swing.JMenu();
        IHM_Menu_Facturer = new javax.swing.JMenuItem();
        IHM_Menu_Etats = new javax.swing.JMenu();
        IHM_Listedesclients = new javax.swing.JMenuItem();
        IHM_Listedesutisateurs = new javax.swing.JMenuItem();
        IHM_Listedesfactures = new javax.swing.JMenuItem();
        IHM_Listedesproduits = new javax.swing.JMenuItem();
        IHM_Menu_Aide = new javax.swing.JMenu();
        IHM_contenuaide = new javax.swing.JMenuItem();
        IHM_contacts = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1100, 660));
        getContentPane().setLayout(null);

        IHM_facture.setMaximumSize(new java.awt.Dimension(1100, 660));
        IHM_facture.setMinimumSize(new java.awt.Dimension(1100, 660));
        IHM_facture.setPreferredSize(new java.awt.Dimension(1100, 660));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Les clients"));

        IHM_NouveauClient.setBackground(new java.awt.Color(153, 255, 255));
        IHM_NouveauClient.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        IHM_NouveauClient.setForeground(new java.awt.Color(255, 255, 255));
        IHM_NouveauClient.setText("NOUVEAU");
        IHM_NouveauClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IHM_NouveauClientActionPerformed(evt);
            }
        });

        IHM_comboclient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IHM_comboclientActionPerformed(evt);
            }
        });

        jButton1.setText("Ajouter");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(IHM_NouveauClient)
                        .addGap(106, 106, 106)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(104, 104, 104)
                        .addComponent(IHM_comboclient, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(96, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(IHM_comboclient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(IHM_NouveauClient)
                    .addComponent(jButton1))
                .addGap(35, 35, 35))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Les produits"));

        IHM_NouveauProduit.setBackground(new java.awt.Color(204, 204, 204));
        IHM_NouveauProduit.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        IHM_NouveauProduit.setForeground(new java.awt.Color(153, 255, 255));
        IHM_NouveauProduit.setText("NOUVEAU");
        IHM_NouveauProduit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IHM_NouveauProduitActionPerformed(evt);
            }
        });

        IHM_ListeProduit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                IHM_ListeProduitMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(IHM_ListeProduit);

        jLabel2.setText("QUANTITE VOULUE : ");

        IHM_JButton_Quantite.setBackground(java.awt.Color.blue);
        IHM_JButton_Quantite.setText("AJOUTER");
        IHM_JButton_Quantite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IHM_JButton_QuantiteActionPerformed(evt);
            }
        });

        jLabel3.setText("DATE FACTURE : ");

        IHM_JButton_DateFacture.setBackground(java.awt.Color.blue);
        IHM_JButton_DateFacture.setText("AJOUTER");
        IHM_JButton_DateFacture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IHM_JButton_DateFactureActionPerformed(evt);
            }
        });

        IHM_gesfact_Total.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IHM_gesfact_TotalActionPerformed(evt);
            }
        });

        jLabel4.setText("Prix Total");

        IHM_gesfact_PU.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IHM_gesfact_PUActionPerformed(evt);
            }
        });

        jLabel5.setText("Prix Unitaire");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(IHM_NouveauProduit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(IHM_DateFacture, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(IHM_JButton_DateFacture)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(IHM_gesfact_Total, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(IHM_gesfact_PU, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(IHM_Quantitevoulue, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(IHM_JButton_Quantite)))
                        .addGap(42, 42, 42))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(IHM_NouveauProduit)
                .addGap(35, 35, 35))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(IHM_Quantitevoulue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(IHM_JButton_Quantite))
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(IHM_gesfact_PU, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(IHM_gesfact_Total, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(IHM_DateFacture, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(IHM_JButton_DateFacture, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );

        IHM_tableau_produit.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Code produit", "Designation", "Prix unitaire", "Quantite", "Prix total"
            }
        ));
        jScrollPane1.setViewportView(IHM_tableau_produit);

        IHM_tab_acheteur.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Nom client", "Prenom", "Telephone", "Date facture"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(IHM_tab_acheteur);

        IHM_JButton_Imprimer.setBackground(java.awt.Color.gray);
        IHM_JButton_Imprimer.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        IHM_JButton_Imprimer.setText("IMPRIMER");
        IHM_JButton_Imprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IHM_JButton_ImprimerActionPerformed(evt);
            }
        });

        IHM_JButton_Enregistrer.setBackground(new java.awt.Color(255, 255, 102));
        IHM_JButton_Enregistrer.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        IHM_JButton_Enregistrer.setText("ENREGISTRER");
        IHM_JButton_Enregistrer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IHM_JButton_EnregistrerActionPerformed(evt);
            }
        });

        IHM_JButton_Nouveau.setBackground(java.awt.Color.blue);
        IHM_JButton_Nouveau.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        IHM_JButton_Nouveau.setText("NOUVEAU");
        IHM_JButton_Nouveau.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IHM_JButton_NouveauActionPerformed(evt);
            }
        });

        IHM_Recu.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        IHM_Recu.setText("Besoin d'un recu ?");
        IHM_Recu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IHM_RecuActionPerformed(evt);
            }
        });

        IHM_gesfac_Quitter.setText("Quitter");
        IHM_gesfac_Quitter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IHM_gesfac_QuitterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout IHM_factureLayout = new javax.swing.GroupLayout(IHM_facture);
        IHM_facture.setLayout(IHM_factureLayout);
        IHM_factureLayout.setHorizontalGroup(
            IHM_factureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(IHM_factureLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(IHM_factureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(IHM_factureLayout.createSequentialGroup()
                        .addGroup(IHM_factureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(IHM_factureLayout.createSequentialGroup()
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 641, Short.MAX_VALUE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1052, Short.MAX_VALUE)
                            .addComponent(jScrollPane1))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, IHM_factureLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(IHM_Recu)
                .addGap(18, 18, 18)
                .addComponent(IHM_JButton_Imprimer)
                .addGap(18, 18, 18)
                .addComponent(IHM_JButton_Enregistrer)
                .addGap(18, 18, 18)
                .addComponent(IHM_JButton_Nouveau)
                .addGap(203, 203, 203)
                .addComponent(IHM_gesfac_Quitter)
                .addGap(177, 177, 177))
        );
        IHM_factureLayout.setVerticalGroup(
            IHM_factureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(IHM_factureLayout.createSequentialGroup()
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(IHM_factureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(IHM_factureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(IHM_JButton_Enregistrer)
                    .addComponent(IHM_JButton_Imprimer)
                    .addComponent(IHM_Recu)
                    .addComponent(IHM_JButton_Nouveau)
                    .addComponent(IHM_gesfac_Quitter))
                .addGap(26, 26, 26))
        );

        getContentPane().add(IHM_facture);
        IHM_facture.setBounds(20, 0, 1060, 610);

        IHM_Menu_Parametre.setText("Parametres");

        IHM_Menu_Client.setText("Client");
        IHM_Menu_Client.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IHM_Menu_ClientActionPerformed(evt);
            }
        });
        IHM_Menu_Parametre.add(IHM_Menu_Client);

        IHM_Menu_Produit.setText("Produit");
        IHM_Menu_Produit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IHM_Menu_ProduitActionPerformed(evt);
            }
        });
        IHM_Menu_Parametre.add(IHM_Menu_Produit);

        IHM_Menu_Utiisateur.setText("Utilisateur");
        IHM_Menu_Utiisateur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IHM_Menu_UtiisateurActionPerformed(evt);
            }
        });
        IHM_Menu_Parametre.add(IHM_Menu_Utiisateur);

        IHM_Menu_Quitter.setText("Quitter");
        IHM_Menu_Quitter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IHM_Menu_QuitterActionPerformed(evt);
            }
        });
        IHM_Menu_Parametre.add(IHM_Menu_Quitter);

        jMenuBar1.add(IHM_Menu_Parametre);

        IHM_Menu_Operation.setText("Operations");

        IHM_Menu_Facturer.setText("Facturer");
        IHM_Menu_Facturer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IHM_Menu_FacturerActionPerformed(evt);
            }
        });
        IHM_Menu_Operation.add(IHM_Menu_Facturer);

        jMenuBar1.add(IHM_Menu_Operation);

        IHM_Menu_Etats.setText("Etats");

        IHM_Listedesclients.setText("Liste des Clients");
        IHM_Listedesclients.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IHM_ListedesclientsActionPerformed(evt);
            }
        });
        IHM_Menu_Etats.add(IHM_Listedesclients);

        IHM_Listedesutisateurs.setText("Liste des Utilisateurs");
        IHM_Listedesutisateurs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IHM_ListedesutisateursActionPerformed(evt);
            }
        });
        IHM_Menu_Etats.add(IHM_Listedesutisateurs);

        IHM_Listedesfactures.setText("Les factures");
        IHM_Listedesfactures.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IHM_ListedesfacturesActionPerformed(evt);
            }
        });
        IHM_Menu_Etats.add(IHM_Listedesfactures);

        IHM_Listedesproduits.setText("Liste des Produits");
        IHM_Listedesproduits.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IHM_ListedesproduitsActionPerformed(evt);
            }
        });
        IHM_Menu_Etats.add(IHM_Listedesproduits);

        jMenuBar1.add(IHM_Menu_Etats);

        IHM_Menu_Aide.setText("Aide");

        IHM_contenuaide.setText("Contenu de l'aide");
        IHM_contenuaide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IHM_contenuaideActionPerformed(evt);
            }
        });
        IHM_Menu_Aide.add(IHM_contenuaide);

        IHM_contacts.setText("Contacts");
        IHM_contacts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IHM_contactsActionPerformed(evt);
            }
        });
        IHM_Menu_Aide.add(IHM_contacts);

        jMenuBar1.add(IHM_Menu_Aide);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void IHM_NouveauClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IHM_NouveauClientActionPerformed
        // TODO add your handling code here:
        this.dispose();
        GestionClient gestionClient = new GestionClient(new java.awt.Frame(), true);
        gestionClient.setVisible(true);
    }//GEN-LAST:event_IHM_NouveauClientActionPerformed

    private void IHM_NouveauProduitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IHM_NouveauProduitActionPerformed
        // TODO add your handling code here:
        this.dispose();
        GestionProduit gestproduit = new GestionProduit(new java.awt.Frame(), true);
        gestproduit.setVisible(true);
    }//GEN-LAST:event_IHM_NouveauProduitActionPerformed

    private void IHM_ListeProduitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_IHM_ListeProduitMouseClicked
        // TODO add your handling code here:
        if (IHM_ListeProduit.isSelectionEmpty()) {
            JOptionPane.showMessageDialog(this, "Erreur, liste vide!");
        } else {
            String ligne = IHM_ListeProduit.getSelectedValue();
            char id_ligne = ligne.charAt(0);
            int id = Character.getNumericValue(id_ligne);
            dao.init();
            Query req4 = dao.em().createQuery("SELECT c FROM ProduitEntite c WHERE c.id=:id");
            req4.setParameter("id", id);
            produit = (ProduitEntite) req4.getSingleResult();
            //
            //pointeur Sur Produit = 0; // Ne me demandez 
            if (pointersurproduit <= 9) {
                //
                IHM_tableau_produit.setValueAt(produit.getId(), pointersurproduit, 0);
                IHM_tableau_produit.setValueAt(produit.getDesignation(), pointersurproduit, 1);
                IHM_tableau_produit.setValueAt(produit.getPrix(), pointersurproduit, 2);
                //Faire avancer le pointeur
                pointersurproduit++;
            } else {
                JOptionPane.showMessageDialog(this, "Vous ne pouvez pas acheter plus de 10 produits au plus");
            }
            dao.close();
        }
    }//GEN-LAST:event_IHM_ListeProduitMouseClicked

    private void IHM_JButton_DateFactureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IHM_JButton_DateFactureActionPerformed
        // TODO add your handling code here:
        IHM_tab_acheteur.setValueAt(IHM_DateFacture.getJCalendar().getYearChooser().getYear() + "/" + IHM_DateFacture.getJCalendar().getMonthChooser().getMonth() + "/" + IHM_DateFacture.getJCalendar().getDayChooser().getDay(), 0, 4);
    }//GEN-LAST:event_IHM_JButton_DateFactureActionPerformed

    private void IHM_JButton_ImprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IHM_JButton_ImprimerActionPerformed
        // TODO add your handling code here:
        PrintPanel printer = new PrintPanel(IHM_facture);
                printer.print();
    }//GEN-LAST:event_IHM_JButton_ImprimerActionPerformed

    private void IHM_JButton_EnregistrerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IHM_JButton_EnregistrerActionPerformed
        // TODO add your handling code here:
           if (IHM_tableau_produit.getSelectedRowCount() < 0) {
            JOptionPane.showMessageDialog(this, "Veuillez selectionner au moins une ligne du tableau");
        }
        int i;
        FactureEntite facture = new FactureEntite();
        FacturerEntite facturer1 = new FacturerEntite();
        FacturerEntite facturer2 = new FacturerEntite();
        FacturerEntite facturer3 = new FacturerEntite();
        FacturerEntite facturer4 = new FacturerEntite();
        FacturerEntite facturer5 = new FacturerEntite();
        FacturerEntite facturer6 = new FacturerEntite();
        FacturerEntite facturer7 = new FacturerEntite();
        FacturerEntite facturer8 = new FacturerEntite();
        FacturerEntite facturer9 = new FacturerEntite();
        FacturerEntite facturer10 = new FacturerEntite();
        ProduitEntite produit1 = new ProduitEntite();
        ProduitEntite produit2 = new ProduitEntite();
        ProduitEntite produit3 = new ProduitEntite();
        ProduitEntite produit4 = new ProduitEntite();
        ProduitEntite produit5 = new ProduitEntite();
        ProduitEntite produit6 = new ProduitEntite();
        ProduitEntite produit7 = new ProduitEntite();
        ProduitEntite produit8 = new ProduitEntite();
        ProduitEntite produit9 = new ProduitEntite();
        ProduitEntite produit10 = new ProduitEntite();
        List<FactureEntite> factureList = new ArrayList<>();
        List<FacturerEntite> facturerList = new ArrayList<>();
        int[] qte = new int[IHM_tableau_produit.getSelectedRowCount()];
        long[] id_pro = new long[IHM_tableau_produit.getSelectedRowCount()];
        String nom_client = (String) IHM_tab_acheteur.getValueAt(0, 1);
        //
        // On recupere le client
        Query req = dao.em().createQuery("SELECT c FROM ClientEntite c WHERE c.nom=:nom");
        req.setParameter("nom", nom_client);
        client = (ClientEntite) req.getSingleResult();
        //
        switch (IHM_tableau_produit.getSelectedRowCount()) {
            case 1:
                id_pro[0] = (long) IHM_tableau_produit.getValueAt(0, 0);
                qte[0] = (int) IHM_tableau_produit.getValueAt(0, 3);
                Query req1 = dao.em().createQuery("SELECT p FROM ProduitEntite p WHERE p.id=:id");
                req1.setParameter("id", id_pro[0]);
                produit1 = (ProduitEntite) req1.getSingleResult();
                facturer1.setProduit(produit1);
                facturer1.setFacture(facture);
                facturer1.setQuantite(qte[0]);
                facturerList.add(facturer1);
                facture.setFacturer(facturerList);
                break;
            case 2:
                //
                id_pro[0] = (long) IHM_tableau_produit.getValueAt(0, 0);
                qte[0] = (int) IHM_tableau_produit.getValueAt(0, 3);
                Query req2 = dao.em().createQuery("SELECT p FROM ProduitEntite p WHERE p.id=:id");
                req2.setParameter("id", id_pro[0]);
                produit1 = (ProduitEntite) req2.getSingleResult();
                facturer1.setProduit(produit1);
                facturer1.setFacture(facture);
                facturer1.setQuantite(qte[0]);
                facturerList.add(facturer1);
                //
                id_pro[1] = (long) IHM_tableau_produit.getValueAt(1, 0);
                qte[1] = (int) IHM_tableau_produit.getValueAt(1, 3);
                Query req3 = dao.em().createQuery("SELECT p FROM ProduitEntite p WHERE p.id=:id");
                req3.setParameter("id", id_pro[1]);
                produit2 = (ProduitEntite) req3.getSingleResult();
                facturer2.setProduit(produit2);
                facturer2.setFacture(facture);
                facturer2.setQuantite(qte[1]);
                facturerList.add(facturer2);
                facture.setFacturer(facturerList);
                break;
            case 3:
                //
                id_pro[0] = (long) IHM_tableau_produit.getValueAt(0, 0);
                qte[0] = (int) IHM_tableau_produit.getValueAt(0, 3);
                Query req4 = dao.em().createQuery("SELECT p FROM ProduitEntite p WHERE p.id=:id");
                req4.setParameter("id", id_pro[0]);
                produit1 = (ProduitEntite) req4.getSingleResult();
                facturer1.setProduit(produit1);
                facturer1.setFacture(facture);
                facturer1.setQuantite(qte[0]);
                facturerList.add(facturer1);
                //
                id_pro[1] = (long) IHM_tableau_produit.getValueAt(1, 0);
                qte[1] = (int) IHM_tableau_produit.getValueAt(1, 3);
                Query req5 = dao.em().createQuery("SELECT p FROM ProduitEntite p WHERE p.id=:id");
                req5.setParameter("id", id_pro[1]);
                produit2 = (ProduitEntite) req5.getSingleResult();
                facturer2.setProduit(produit2);
                facturer2.setFacture(facture);
                facturer2.setQuantite(qte[1]);
                facturerList.add(facturer2);
                //
                id_pro[2] = (long) IHM_tableau_produit.getValueAt(2, 0);
                qte[2] = (int) IHM_tableau_produit.getValueAt(2, 3);
                Query req6 = dao.em().createQuery("SELECT p FROM ProduitEntite p WHERE p.id=:id");
                req6.setParameter("id", id_pro[2]);
                produit3 = (ProduitEntite) req6.getSingleResult();
                facturer3.setProduit(produit3);
                facturer3.setFacture(facture);
                facturer3.setQuantite(qte[2]);
                facturerList.add(facturer3);
                facture.setFacturer(facturerList);
                break;
            case 4:
                //
                id_pro[0] = (long) IHM_tableau_produit.getValueAt(0, 0);
                qte[0] = (int) IHM_tableau_produit.getValueAt(0, 3);
                Query req7 = dao.em().createQuery("SELECT p FROM ProduitEntite p WHERE p.id=:id");
                req7.setParameter("id", id_pro[0]);
                produit1 = (ProduitEntite) req7.getSingleResult();
                facturer1.setProduit(produit1);
                facturer1.setFacture(facture);
                facturer1.setQuantite(qte[0]);
                facturerList.add(facturer1);
                //
                id_pro[1] = (long) IHM_tableau_produit.getValueAt(1, 0);
                qte[1] = (int) IHM_tableau_produit.getValueAt(1, 3);
                Query req8 = dao.em().createQuery("SELECT p FROM ProduitEntite p WHERE p.id=:id");
                req8.setParameter("id", id_pro[1]);
                produit2 = (ProduitEntite) req8.getSingleResult();
                facturer2.setProduit(produit2);
                facturer2.setFacture(facture);
                facturer2.setQuantite(qte[1]);
                facturerList.add(facturer2);
                //
                id_pro[2] = (long) IHM_tableau_produit.getValueAt(2, 0);
                qte[2] = (int) IHM_tableau_produit.getValueAt(2, 3);
                Query req9 = dao.em().createQuery("SELECT p FROM ProduitEntite p WHERE p.id=:id");
                req9.setParameter("id", id_pro[2]);
                produit3 = (ProduitEntite) req9.getSingleResult();
                facturer3.setProduit(produit3);
                facturer3.setFacture(facture);
                facturer3.setQuantite(qte[2]);
                facturerList.add(facturer3);
                //
                id_pro[3] = (long) IHM_tableau_produit.getValueAt(3, 0);
                qte[3] = (int) IHM_tableau_produit.getValueAt(3, 3);
                Query req10 = dao.em().createQuery("SELECT p FROM ProduitEntite p WHERE p.id=:id");
                req10.setParameter("id", id_pro[3]);
                produit4 = (ProduitEntite) req10.getSingleResult();
                facturer4.setProduit(produit4);
                facturer4.setFacture(facture);
                facturer4.setQuantite(qte[3]);
                facturerList.add(facturer4);
                facture.setFacturer(facturerList);
                break;
            case 5:
                //
                id_pro[0] = (long) IHM_tableau_produit.getValueAt(0, 0);
                qte[0] = (int) IHM_tableau_produit.getValueAt(0, 3);
                Query req11 = dao.em().createQuery("SELECT p FROM ProduitEntite p WHERE p.id=:id");
                req11.setParameter("id", id_pro[0]);
                produit1 = (ProduitEntite) req11.getSingleResult();
                facturer1.setProduit(produit1);
                facturer1.setFacture(facture);
                facturer1.setQuantite(qte[0]);
                facturerList.add(facturer1);
                //
                id_pro[1] = (long) IHM_tableau_produit.getValueAt(1, 0);
                qte[1] = (int) IHM_tableau_produit.getValueAt(1, 3);
                Query req12 = dao.em().createQuery("SELECT p FROM ProduitEntite p WHERE p.id=:id");
                req12.setParameter("id", id_pro[1]);
                produit2 = (ProduitEntite) req12.getSingleResult();
                facturer2.setProduit(produit2);
                facturer2.setFacture(facture);
                facturer2.setQuantite(qte[1]);
                facturerList.add(facturer2);
                //
                id_pro[2] = (long) IHM_tableau_produit.getValueAt(2, 0);
                qte[2] = (int) IHM_tableau_produit.getValueAt(2, 3);
                Query req13 = dao.em().createQuery("SELECT p FROM ProduitEntite p WHERE p.id=:id");
                req13.setParameter("id", id_pro[2]);
                produit3 = (ProduitEntite) req13.getSingleResult();
                facturer3.setProduit(produit3);
                facturer3.setFacture(facture);
                facturer3.setQuantite(qte[2]);
                facturerList.add(facturer3);
                //
                id_pro[3] = (long) IHM_tableau_produit.getValueAt(3, 0);
                qte[3] = (int) IHM_tableau_produit.getValueAt(3, 3);
                Query req14 = dao.em().createQuery("SELECT p FROM ProduitEntite p WHERE p.id=:id");
                req14.setParameter("id", id_pro[3]);
                produit4 = (ProduitEntite) req14.getSingleResult();
                facturer4.setProduit(produit4);
                facturer4.setFacture(facture);
                facturer4.setQuantite(qte[3]);
                facturerList.add(facturer4);
                //
                id_pro[4] = (long) IHM_tableau_produit.getValueAt(4, 0);
                qte[4] = (int) IHM_tableau_produit.getValueAt(4, 3);
                Query req15 = dao.em().createQuery("SELECT p FROM ProduitEntite p WHERE p.id=:id");
                req15.setParameter("id", id_pro[4]);
                produit5 = (ProduitEntite) req15.getSingleResult();
                facturer5.setProduit(produit5);
                facturer5.setFacture(facture);
                facturer5.setQuantite(qte[4]);
                facturerList.add(facturer5);
                facture.setFacturer(facturerList);
                break;
            case 6:
                //
                id_pro[0] = (long) IHM_tableau_produit.getValueAt(0, 0);
                qte[0] = (int) IHM_tableau_produit.getValueAt(0, 3);
                Query req16 = dao.em().createQuery("SELECT p FROM ProduitEntite p WHERE p.id=:id");
                req16.setParameter("id", id_pro[0]);
                produit1 = (ProduitEntite) req16.getSingleResult();
                facturer1.setProduit(produit1);
                facturer1.setFacture(facture);
                facturer1.setQuantite(qte[0]);
                facturerList.add(facturer1);
                //
                id_pro[1] = (long) IHM_tableau_produit.getValueAt(1, 0);
                qte[1] = (int) IHM_tableau_produit.getValueAt(1, 3);
                Query req17 = dao.em().createQuery("SELECT p FROM ProduitEntite p WHERE p.id=:id");
                req17.setParameter("id", id_pro[1]);
                produit2 = (ProduitEntite) req17.getSingleResult();
                facturer2.setProduit(produit2);
                facturer2.setFacture(facture);
                facturer2.setQuantite(qte[1]);
                facturerList.add(facturer2);
                //
                id_pro[2] = (long) IHM_tableau_produit.getValueAt(2, 0);
                qte[2] = (int) IHM_tableau_produit.getValueAt(2, 3);
                Query req18 = dao.em().createQuery("SELECT p FROM ProduitEntite p WHERE p.id=:id");
                req18.setParameter("id", id_pro[2]);
                produit3 = (ProduitEntite) req18.getSingleResult();
                facturer3.setProduit(produit3);
                facturer3.setFacture(facture);
                facturer3.setQuantite(qte[2]);
                facturerList.add(facturer3);
                //
                id_pro[3] = (long) IHM_tableau_produit.getValueAt(3, 0);
                qte[3] = (int) IHM_tableau_produit.getValueAt(3, 3);
                Query req19 = dao.em().createQuery("SELECT p FROM ProduitEntite p WHERE p.id=:id");
                req19.setParameter("id", id_pro[3]);
                produit4 = (ProduitEntite) req19.getSingleResult();
                facturer4.setProduit(produit4);
                facturer4.setFacture(facture);
                facturer4.setQuantite(qte[3]);
                facturerList.add(facturer4);
                //
                id_pro[4] = (long) IHM_tableau_produit.getValueAt(4, 0);
                qte[4] = (int) IHM_tableau_produit.getValueAt(4, 3);
                Query req20 = dao.em().createQuery("SELECT p FROM ProduitEntite p WHERE p.id=:id");
                req20.setParameter("id", id_pro[4]);
                produit5 = (ProduitEntite) req20.getSingleResult();
                facturer5.setProduit(produit5);
                facturer5.setFacture(facture);
                facturer5.setQuantite(qte[4]);
                facturerList.add(facturer5);
                //
                id_pro[5] = (long) IHM_tableau_produit.getValueAt(5, 0);
                qte[5] = (int) IHM_tableau_produit.getValueAt(5, 3);
                Query req21 = dao.em().createQuery("SELECT p FROM ProduitEntite p WHERE p.id=:id");
                req21.setParameter("id", id_pro[5]);
                produit6 = (ProduitEntite) req21.getSingleResult();
                facturer6.setProduit(produit6);
                facturer6.setFacture(facture);
                facturer6.setQuantite(qte[5]);
                facturerList.add(facturer6);
                facture.setFacturer(facturerList);
                break;
            case 7:
                //
                id_pro[0] = (long) IHM_tableau_produit.getValueAt(0, 0);
                qte[0] = (int) IHM_tableau_produit.getValueAt(0, 3);
                Query req22 = dao.em().createQuery("SELECT p FROM ProduitEntite p WHERE p.id=:id");
                req22.setParameter("id", id_pro[0]);
                produit1 = (ProduitEntite) req22.getSingleResult();
                facturer1.setProduit(produit1);
                facturer1.setFacture(facture);
                facturer1.setQuantite(qte[0]);
                facturerList.add(facturer1);
                //
                id_pro[1] = (long) IHM_tableau_produit.getValueAt(1, 0);
                qte[1] = (int) IHM_tableau_produit.getValueAt(1, 3);
                Query req23 = dao.em().createQuery("SELECT p FROM ProduitEntite p WHERE p.id=:id");
                req23.setParameter("id", id_pro[1]);
                produit2 = (ProduitEntite) req23.getSingleResult();
                facturer2.setProduit(produit2);
                facturer2.setFacture(facture);
                facturer2.setQuantite(qte[1]);
                facturerList.add(facturer2);
                //
                id_pro[2] = (long) IHM_tableau_produit.getValueAt(2, 0);
                qte[2] = (int) IHM_tableau_produit.getValueAt(2, 3);
                Query req24 = dao.em().createQuery("SELECT p FROM ProduitEntite p WHERE p.id=:id");
                req24.setParameter("id", id_pro[2]);
                produit3 = (ProduitEntite) req24.getSingleResult();
                facturer3.setProduit(produit3);
                facturer3.setFacture(facture);
                facturer3.setQuantite(qte[2]);
                facturerList.add(facturer3);
                //
                id_pro[3] = (long) IHM_tableau_produit.getValueAt(3, 0);
                qte[3] = (int) IHM_tableau_produit.getValueAt(3, 3);
                Query req25 = dao.em().createQuery("SELECT p FROM ProduitEntite p WHERE p.id=:id");
                req25.setParameter("id", id_pro[3]);
                produit4 = (ProduitEntite) req25.getSingleResult();
                facturer4.setProduit(produit4);
                facturer4.setFacture(facture);
                facturer4.setQuantite(qte[3]);
                facturerList.add(facturer4);
                //
                id_pro[4] = (long) IHM_tableau_produit.getValueAt(4, 0);
                qte[4] = (int) IHM_tableau_produit.getValueAt(4, 3);
                Query req26 = dao.em().createQuery("SELECT p FROM ProduitEntite p WHERE p.id=:id");
                req26.setParameter("id", id_pro[4]);
                produit5 = (ProduitEntite) req26.getSingleResult();
                facturer5.setProduit(produit5);
                facturer5.setFacture(facture);
                facturer5.setQuantite(qte[4]);
                facturerList.add(facturer5);
                //
                id_pro[5] = (long) IHM_tableau_produit.getValueAt(5, 0);
                qte[5] = (int) IHM_tableau_produit.getValueAt(5, 3);
                Query req27 = dao.em().createQuery("SELECT p FROM ProduitEntite p WHERE p.id=:id");
                req27.setParameter("id", id_pro[5]);
                produit6 = (ProduitEntite) req27.getSingleResult();
                facturer6.setProduit(produit6);
                facturer6.setFacture(facture);
                facturer6.setQuantite(qte[6]);
                facturerList.add(facturer6);
                //
                id_pro[6] = (long) IHM_tableau_produit.getValueAt(6, 0);
                qte[6] = (int) IHM_tableau_produit.getValueAt(6, 3);
                Query req28 = dao.em().createQuery("SELECT p FROM ProduitEntite p WHERE p.id=:id");
                req28.setParameter("id", id_pro[6]);
                produit7 = (ProduitEntite) req28.getSingleResult();
                facturer7.setProduit(produit7);
                facturer7.setFacture(facture);
                facturer7.setQuantite(qte[6]);
                facturerList.add(facturer7);
                facture.setFacturer(facturerList);
                break;
            case 8:
                //
                id_pro[0] = (long) IHM_tableau_produit.getValueAt(0, 0);
                qte[0] = (int) IHM_tableau_produit.getValueAt(0, 3);
                Query req29 = dao.em().createQuery("SELECT p FROM ProduitEntite p WHERE p.id=:id");
                req29.setParameter("id", id_pro[0]);
                produit1 = (ProduitEntite) req29.getSingleResult();
                facturer1.setProduit(produit1);
                facturer1.setFacture(facture);
                facturer1.setQuantite(qte[0]);
                facturerList.add(facturer1);
                //
                id_pro[1] = (long) IHM_tableau_produit.getValueAt(1, 0);
                qte[1] = (int) IHM_tableau_produit.getValueAt(1, 3);
                Query req30 = dao.em().createQuery("SELECT p FROM ProduitEntite p WHERE p.id=:id");
                req30.setParameter("id", id_pro[1]);
                produit2 = (ProduitEntite) req30.getSingleResult();
                facturer2.setProduit(produit2);
                facturer2.setFacture(facture);
                facturer2.setQuantite(qte[1]);
                facturerList.add(facturer2);
                //
                id_pro[2] = (long) IHM_tableau_produit.getValueAt(2, 0);
                qte[2] = (int) IHM_tableau_produit.getValueAt(2, 3);
                Query req31 = dao.em().createQuery("SELECT p FROM ProduitEntite p WHERE p.id=:id");
                req31.setParameter("id", id_pro[2]);
                produit3 = (ProduitEntite) req31.getSingleResult();
                facturer3.setProduit(produit3);
                facturer3.setFacture(facture);
                facturer3.setQuantite(qte[2]);
                facturerList.add(facturer3);
                //
                id_pro[3] = (long) IHM_tableau_produit.getValueAt(3, 0);
                qte[3] = (int) IHM_tableau_produit.getValueAt(3, 3);
                Query req32 = dao.em().createQuery("SELECT p FROM ProduitEntite p WHERE p.id=:id");
                req32.setParameter("id", id_pro[3]);
                produit4 = (ProduitEntite) req32.getSingleResult();
                facturer4.setProduit(produit4);
                facturer4.setFacture(facture);
                facturer4.setQuantite(qte[3]);
                facturerList.add(facturer4);
                //
                id_pro[4] = (long) IHM_tableau_produit.getValueAt(4, 0);
                qte[4] = (int) IHM_tableau_produit.getValueAt(4, 3);
                Query req33 = dao.em().createQuery("SELECT p FROM ProduitEntite p WHERE p.id=:id");
                req33.setParameter("id", id_pro[4]);
                produit5 = (ProduitEntite) req33.getSingleResult();
                facturer5.setProduit(produit5);
                facturer5.setFacture(facture);
                facturer5.setQuantite(qte[4]);
                facturerList.add(facturer5);
                //
                id_pro[5] = (long) IHM_tableau_produit.getValueAt(5, 0);
                qte[5] = (int) IHM_tableau_produit.getValueAt(5, 3);
                Query req34 = dao.em().createQuery("SELECT p FROM ProduitEntite p WHERE p.id=:id");
                req34.setParameter("id", id_pro[5]);
                produit6 = (ProduitEntite) req34.getSingleResult();
                facturer6.setProduit(produit6);
                facturer6.setFacture(facture);
                facturer6.setQuantite(qte[6]);
                facturerList.add(facturer6);
                //
                id_pro[6] = (long) IHM_tableau_produit.getValueAt(6, 0);
                qte[6] = (int) IHM_tableau_produit.getValueAt(6, 3);
                Query req35 = dao.em().createQuery("SELECT p FROM ProduitEntite p WHERE p.id=:id");
                req35.setParameter("id", id_pro[6]);
                produit7 = (ProduitEntite) req35.getSingleResult();
                facturer7.setProduit(produit7);
                facturer7.setFacture(facture);
                facturer7.setQuantite(qte[6]);
                facturerList.add(facturer7);
                //
                id_pro[7] = (long) IHM_tableau_produit.getValueAt(7, 0);
                qte[7] = (int) IHM_tableau_produit.getValueAt(7, 3);
                Query req36 = dao.em().createQuery("SELECT p FROM ProduitEntite p WHERE p.id=:id");
                req36.setParameter("id", id_pro[7]);
                produit8 = (ProduitEntite) req36.getSingleResult();
                facturer8.setProduit(produit8);
                facturer8.setFacture(facture);
                facturer8.setQuantite(qte[7]);
                facturerList.add(facturer8);
                facture.setFacturer(facturerList);
                break;
            case 9:
                //
                id_pro[0] = (long) IHM_tableau_produit.getValueAt(0, 0);
                qte[0] = (int) IHM_tableau_produit.getValueAt(0, 3);
                Query req37 = dao.em().createQuery("SELECT p FROM ProduitEntite p WHERE p.id=:id");
                req37.setParameter("id", id_pro[0]);
                produit1 = (ProduitEntite) req37.getSingleResult();
                facturer1.setProduit(produit1);
                facturer1.setFacture(facture);
                facturer1.setQuantite(qte[0]);
                facturerList.add(facturer1);
                //
                id_pro[1] = (long) IHM_tableau_produit.getValueAt(1, 0);
                qte[1] = (int) IHM_tableau_produit.getValueAt(1, 3);
                Query req38 = dao.em().createQuery("SELECT p FROM ProduitEntite p WHERE p.id=:id");
                req38.setParameter("id", id_pro[1]);
                produit2 = (ProduitEntite) req38.getSingleResult();
                facturer2.setProduit(produit2);
                facturer2.setFacture(facture);
                facturer2.setQuantite(qte[1]);
                facturerList.add(facturer2);
                //
                id_pro[2] = (long) IHM_tableau_produit.getValueAt(2, 0);
                qte[2] = (int) IHM_tableau_produit.getValueAt(2, 3);
                Query req39 = dao.em().createQuery("SELECT p FROM ProduitEntite p WHERE p.id=:id");
                req39.setParameter("id", id_pro[2]);
                produit3 = (ProduitEntite) req39.getSingleResult();
                facturer3.setProduit(produit3);
                facturer3.setFacture(facture);
                facturer3.setQuantite(qte[2]);
                facturerList.add(facturer3);
                //
                id_pro[3] = (long) IHM_tableau_produit.getValueAt(3, 0);
                qte[3] = (int) IHM_tableau_produit.getValueAt(3, 3);
                Query req40 = dao.em().createQuery("SELECT p FROM ProduitEntite p WHERE p.id=:id");
                req40.setParameter("id", id_pro[3]);
                produit4 = (ProduitEntite) req40.getSingleResult();
                facturer4.setProduit(produit4);
                facturer4.setFacture(facture);
                facturer4.setQuantite(qte[3]);
                facturerList.add(facturer4);
                //
                id_pro[4] = (long) IHM_tableau_produit.getValueAt(4, 0);
                qte[4] = (int) IHM_tableau_produit.getValueAt(4, 3);
                Query req41 = dao.em().createQuery("SELECT p FROM ProduitEntite p WHERE p.id=:id");
                req41.setParameter("id", id_pro[4]);
                produit5 = (ProduitEntite) req41.getSingleResult();
                facturer5.setProduit(produit5);
                facturer5.setFacture(facture);
                facturer5.setQuantite(qte[4]);
                facturerList.add(facturer5);
                //
                id_pro[5] = (long) IHM_tableau_produit.getValueAt(5, 0);
                qte[5] = (int) IHM_tableau_produit.getValueAt(5, 3);
                Query req42 = dao.em().createQuery("SELECT p FROM ProduitEntite p WHERE p.id=:id");
                req42.setParameter("id", id_pro[5]);
                produit6 = (ProduitEntite) req42.getSingleResult();
                facturer6.setProduit(produit6);
                facturer6.setFacture(facture);
                facturer6.setQuantite(qte[6]);
                facturerList.add(facturer6);
                //
                id_pro[6] = (long) IHM_tableau_produit.getValueAt(6, 0);
                qte[6] = (int) IHM_tableau_produit.getValueAt(6, 3);
                Query req43 = dao.em().createQuery("SELECT p FROM ProduitEntite p WHERE p.id=:id");
                req43.setParameter("id", id_pro[6]);
                produit7 = (ProduitEntite) req43.getSingleResult();
                facturer7.setProduit(produit7);
                facturer7.setFacture(facture);
                facturer7.setQuantite(qte[6]);
                facturerList.add(facturer7);
                //
                id_pro[7] = (long) IHM_tableau_produit.getValueAt(7, 0);
                qte[7] = (int) IHM_tableau_produit.getValueAt(7, 3);
                Query req44 = dao.em().createQuery("SELECT p FROM ProduitEntite p WHERE p.id=:id");
                req44.setParameter("id", id_pro[7]);
                produit8 = (ProduitEntite) req44.getSingleResult();
                facturer8.setProduit(produit8);
                facturer8.setFacture(facture);
                facturer8.setQuantite(qte[7]);
                facturerList.add(facturer8);
                //
                id_pro[8] = (long) IHM_tableau_produit.getValueAt(8, 0);
                qte[8] = (int) IHM_tableau_produit.getValueAt(8, 3);
                Query req45 = dao.em().createQuery("SELECT p FROM ProduitEntite p WHERE p.id=:id");
                req45.setParameter("id", id_pro[7]);
                produit9 = (ProduitEntite) req45.getSingleResult();
                facturer9.setProduit(produit9);
                facturer9.setFacture(facture);
                facturer9.setQuantite(qte[8]);
                facturerList.add(facturer9);
                facture.setFacturer(facturerList);
                break;
            case 10:
                //
                id_pro[0] = (long) IHM_tableau_produit.getValueAt(0, 0);
                qte[0] = (int) IHM_tableau_produit.getValueAt(0, 3);
                Query req46 = dao.em().createQuery("SELECT p FROM ProduitEntite p WHERE p.id=:id");
                req46.setParameter("id", id_pro[0]);
                produit1 = (ProduitEntite) req46.getSingleResult();
                facturer1.setProduit(produit1);
                facturer1.setFacture(facture);
                facturer1.setQuantite(qte[0]);
                facturerList.add(facturer1);
                //
                id_pro[1] = (long) IHM_tableau_produit.getValueAt(1, 0);
                qte[1] = (int) IHM_tableau_produit.getValueAt(1, 3);
                Query req47 = dao.em().createQuery("SELECT p FROM ProduitEntite p WHERE p.id=:id");
                req47.setParameter("id", id_pro[1]);
                produit2 = (ProduitEntite) req47.getSingleResult();
                facturer2.setProduit(produit2);
                facturer2.setFacture(facture);
                facturer2.setQuantite(qte[1]);
                facturerList.add(facturer2);
                //
                id_pro[2] = (long) IHM_tableau_produit.getValueAt(2, 0);
                qte[2] = (int) IHM_tableau_produit.getValueAt(2, 3);
                Query req48 = dao.em().createQuery("SELECT p FROM ProduitEntite p WHERE p.id=:id");
                req48.setParameter("id", id_pro[2]);
                produit3 = (ProduitEntite) req48.getSingleResult();
                facturer3.setProduit(produit3);
                facturer3.setFacture(facture);
                facturer3.setQuantite(qte[2]);
                facturerList.add(facturer3);
                //
                id_pro[3] = (long) IHM_tableau_produit.getValueAt(3, 0);
                qte[3] = (int) IHM_tableau_produit.getValueAt(3, 3);
                Query req49 = dao.em().createQuery("SELECT p FROM ProduitEntite p WHERE p.id=:id");
                req49.setParameter("id", id_pro[3]);
                produit4 = (ProduitEntite) req49.getSingleResult();
                facturer4.setProduit(produit4);
                facturer4.setFacture(facture);
                facturer4.setQuantite(qte[3]);
                facturerList.add(facturer4);
                //
                id_pro[4] = (long) IHM_tableau_produit.getValueAt(4, 0);
                qte[4] = (int) IHM_tableau_produit.getValueAt(4, 3);
                Query req50 = dao.em().createQuery("SELECT p FROM ProduitEntite p WHERE p.id=:id");
                req50.setParameter("id", id_pro[4]);
                produit5 = (ProduitEntite) req50.getSingleResult();
                facturer5.setProduit(produit5);
                facturer5.setFacture(facture);
                facturer5.setQuantite(qte[4]);
                facturerList.add(facturer5);
                //
                id_pro[5] = (long) IHM_tableau_produit.getValueAt(5, 0);
                qte[5] = (int) IHM_tableau_produit.getValueAt(5, 3);
                Query req51 = dao.em().createQuery("SELECT p FROM ProduitEntite p WHERE p.id=:id");
                req51.setParameter("id", id_pro[5]);
                produit6 = (ProduitEntite) req51.getSingleResult();
                facturer6.setProduit(produit6);
                facturer6.setFacture(facture);
                facturer6.setQuantite(qte[6]);
                facturerList.add(facturer6);
                //
                id_pro[6] = (long) IHM_tableau_produit.getValueAt(6, 0);
                qte[6] = (int) IHM_tableau_produit.getValueAt(6, 3);
                Query req52 = dao.em().createQuery("SELECT p FROM ProduitEntite p WHERE p.id=:id");
                req52.setParameter("id", id_pro[6]);
                produit7 = (ProduitEntite) req52.getSingleResult();
                facturer7.setProduit(produit7);
                facturer7.setFacture(facture);
                facturer7.setQuantite(qte[6]);
                facturerList.add(facturer7);
                //
                id_pro[7] = (long) IHM_tableau_produit.getValueAt(7, 0);
                qte[7] = (int) IHM_tableau_produit.getValueAt(7, 3);
                Query req53 = dao.em().createQuery("SELECT p FROM ProduitEntite p WHERE p.id=:id");
                req53.setParameter("id", id_pro[7]);
                produit8 = (ProduitEntite) req53.getSingleResult();
                facturer8.setProduit(produit8);
                facturer8.setFacture(facture);
                facturer8.setQuantite(qte[7]);
                facturerList.add(facturer8);
                //
                id_pro[8] = (long) IHM_tableau_produit.getValueAt(8, 0);
                qte[8] = (int) IHM_tableau_produit.getValueAt(8, 3);
                Query req54 = dao.em().createQuery("SELECT p FROM ProduitEntite p WHERE p.id=:id");
                req54.setParameter("id", id_pro[7]);
                produit9 = (ProduitEntite) req54.getSingleResult();
                facturer9.setProduit(produit9);
                facturer9.setFacture(facture);
                facturer9.setQuantite(qte[8]);
                facturerList.add(facturer9);
                //
                id_pro[9] = (long) IHM_tableau_produit.getValueAt(9, 0);
                qte[9] = (int) IHM_tableau_produit.getValueAt(9, 3);
                Query req55 = dao.em().createQuery("SELECT p FROM ProduitEntite p WHERE p.id=:id");
                req55.setParameter("id", id_pro[9]);
                produit10 = (ProduitEntite) req55.getSingleResult();
                facturer10.setProduit(produit10);
                facturer10.setFacture(facture);
                facturer10.setQuantite(qte[9]);
                facturerList.add(facturer10);
                facture.setFacturer(facturerList);
                break;
            default:
                System.err.println("FIN, mais ??");
        }
        // 
        dao.init();
        factureList.add(facture);
        client.setFactures(factureList);
        facture.setClient(client);
       /* String date1 = (String) IHM_tab_acheteur.getValueAt(0, 4);
        try {
            Date date2 = formatter.parse(date1);
            facture.setDateFacture(date2);
        } catch (ParseException ex) {
            Logger.getLogger(GestionFacture.class.getName()).log(Level.SEVERE, null, ex);
        }*/
            facture.setDateFacture(IHM_DateFacture.getDate());
        facture.setFacturer(facturerList);
        //
        switch (IHM_tableau_produit.getSelectedRowCount()) {
            case 1:
                dao.prepare(facturer1);
                break;
            case 2:
                dao.prepare(facturer1);
                dao.prepare(facturer2);
                break;
            case 3:
                dao.prepare(facturer1);
                dao.prepare(facturer2);
                dao.prepare(facturer3);
                break;
            case 4:
                dao.prepare(facturer1);
                dao.prepare(facturer2);
                dao.prepare(facturer3);
                dao.prepare(facturer4);
                break;
            case 6:
                dao.prepare(facturer1);
                dao.prepare(facturer2);
                dao.prepare(facturer3);
                dao.prepare(facturer4);
                dao.prepare(facturer5);
                dao.prepare(facturer6);
                break;
            case 7:
                dao.prepare(facturer1);
                dao.prepare(facturer2);
                dao.prepare(facturer3);
                dao.prepare(facturer4);
                dao.prepare(facturer5);
                dao.prepare(facturer6);
                dao.prepare(facturer7);
                break;
            case 8:
                dao.prepare(facturer1);
                dao.prepare(facturer2);
                dao.prepare(facturer3);
                dao.prepare(facturer4);
                dao.prepare(facturer5);
                dao.prepare(facturer6);
                dao.prepare(facturer7);
                dao.prepare(facturer8);
                break;
            case 9:
                dao.prepare(facturer1);
                dao.prepare(facturer2);
                dao.prepare(facturer3);
                dao.prepare(facturer4);
                dao.prepare(facturer5);
                dao.prepare(facturer6);
                dao.prepare(facturer7);
                dao.prepare(facturer8);
                dao.prepare(facturer9);
                break;
            case 10:
                dao.prepare(facturer1);
                dao.prepare(facturer2);
                dao.prepare(facturer3);
                dao.prepare(facturer4);
                dao.prepare(facturer5);
                dao.prepare(facturer6);
                dao.prepare(facturer7);
                dao.prepare(facturer8);
                dao.prepare(facturer9);
                break;
            default:
                System.err.println("FIN DES PEINES!");
                break;
        }
        //
        dao.prepare(facture);
        dao.save();
        dao.close();
        //
        JOptionPane.showMessageDialog(this, "Insertion de facture REUSSI!");
        //
        dispose();
        GestionFacture gesfac = new GestionFacture(new java.awt.Frame(), true);
        gesfac.setVisible(true);
    }//GEN-LAST:event_IHM_JButton_EnregistrerActionPerformed
    
    private void IHM_JButton_NouveauActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IHM_JButton_NouveauActionPerformed
        // TODO add your handling code here:
        this.dispose();
        GestionFacture ges_facture = new GestionFacture(new java.awt.Frame(), true);
        ges_facture.setVisible(true);
    }//GEN-LAST:event_IHM_JButton_NouveauActionPerformed

    private void IHM_RecuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IHM_RecuActionPerformed
        // TODO add your handling code here:
        // Ca se comprends ?
        if (IHM_Recu.isSelected()) {
            IHM_JButton_Imprimer.setVisible(true);
        } else {
            IHM_JButton_Imprimer.setVisible(false);
        }
    }//GEN-LAST:event_IHM_RecuActionPerformed

    private void IHM_gesfac_QuitterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IHM_gesfac_QuitterActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_IHM_gesfac_QuitterActionPerformed

    private void IHM_comboclientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IHM_comboclientActionPerformed
        /*Query req = dao.em().createQuery("SELECT c FROM ClientEntite c ");
         listeclient = (List<ClientEntite>) IHM_comboclient.getSelectedItem();
         if (pointerclient < 10){
         for (ClientEntite c:listeclient){ 
         IHM_tab_acheteur.setValueAt(c.getId(), pointerclient, 0);
         IHM_tab_acheteur.setValueAt(c.getNom(), pointerclient, 1);
         IHM_tab_acheteur.setValueAt(c.getPrenom(), pointerclient, 2);
                   
         IHM_tab_acheteur.setValueAt(c.getAdresse().getTelephone(), pointerclient, 3);
         pointerclient ++ ;
         }
         }else{
         JOptionPane.showMessageDialog(this, "Taille maximum dépassé");
         }*/


    }//GEN-LAST:event_IHM_comboclientActionPerformed

    private void IHM_JButton_QuantiteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IHM_JButton_QuantiteActionPerformed
        // TODO add your handling code here:
       /* String ligne = IHM_ListeProduit.getSelectedValue();
         char id_ligne = ligne.charAt(0);
         int id = Character.getNumericValue(id_ligne);
         dao.init();
         Query req4 = dao.em().createQuery("SELECT c FROM ProduitEntite c WHERE c.id=:id");
         req4.setParameter("id", id);
         produit = (ProduitEntite) req4.getSingleResult();
         //pointeur Sur Produit = -1;*/
        if (IHM_Quantitevoulue.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Saisir une quantitie SVP !");
        } /* try {
         IHM_tableau_produit.setValueAt(Integer.parseInt(IHM_gesfact_Quantite.getText()), pointersurproduit - 1, 3); // Danger au niveau du pointeur
         IHM_tableau_produit.setValueAt(produit.getPrix() * Integer.parseInt(IHM_gesfact_Quantite.getText()), pointersurproduit - 1, 4); // Danger au niveau du pointeur
         pointersurproduit++;
         } catch (NumberFormatException n) {
         JOptionPane.showMessageDialog(this, n.getMessage());
         }
         //
         pointersurproduit = pointersurproduit - 1; // 
         dao.close();
         IHM_gesfact_Quantite.setText("");
    }//GEN-LAST:event_IHM_JButton_QuantiteActionPerformed
*/
            else {
                IHM_gesfact_PU.setText(Integer.toString(produit.getPrix()));
                IHM_tableau_produit.setValueAt(Integer.parseInt(IHM_Quantitevoulue.getText()), pointersurproduit - 1, 3);

                IHM_tableau_produit.setValueAt(Integer.parseInt(IHM_Quantitevoulue.getText()) * produit.getPrix(), pointersurproduit - 1, 4);
           // IHM_gesfact_Total.setText(Double.parseDouble(IHM_Quantitevoulue.getText())*produit.getPrix(), pointersurproduit-1, 4);
                // IHM_tableau_produit.setValueAt(IHM_gesfact_Total.getText(), pointersurproduit-1, 4);
            }

        }
    private void IHM_gesfact_TotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IHM_gesfact_TotalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_IHM_gesfact_TotalActionPerformed

    private void IHM_gesfact_PUActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IHM_gesfact_PUActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_IHM_gesfact_PUActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here
        String ligne = (String) IHM_comboclient.getSelectedItem();
        char at1 = ligne.charAt(0);
        char at2 = ligne.charAt(1);
        int id1 = Character.getNumericValue(at1);
        int id2 = Character.getNumericValue(at2) + 10;

        if (id1 < 10) {
            //Liste < 10

            //Liste >10
            Query req3 = dao.em().createQuery("SELECT c FROM ClientEntite c WHERE c.id=:id");
            req3.setParameter("id", id1);
            client = (ClientEntite) req3.getSingleResult();
            // if(pointerclient<10){
            IHM_tab_acheteur.setValueAt(client.getId(), pointerclient, 0);
            IHM_tab_acheteur.setValueAt(client.getNom(), pointerclient, 1);
            IHM_tab_acheteur.setValueAt(client.getPrenom(), pointerclient, 2);
            IHM_tab_acheteur.setValueAt(client.getAdresse().getTelephone(), pointerclient, 3);

           // }
            //
        } else {
            Query req4 = dao.em().createQuery("SELECT c FROM ClientEntite c WHERE c.id=:id");
            req4.setParameter("id", id2);
            client = (ClientEntite) req4.getSingleResult();
            IHM_tab_acheteur.setValueAt(client.getId(), pointerclient, 0);
            IHM_tab_acheteur.setValueAt(client.getNom(), pointerclient, 1);
            IHM_tab_acheteur.setValueAt(client.getPrenom(), pointerclient, 2);
            IHM_tab_acheteur.setValueAt(client.getAdresse().getTelephone(), pointerclient, 3);

            //
            //
            JOptionPane.showMessageDialog(this, "Modification des données du  client bien fait ");

        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void IHM_Menu_ClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IHM_Menu_ClientActionPerformed
        // TODO add your handling code here:
        this.dispose ();
        GestionClient gestionClient = new  GestionClient(new java.awt.Frame(), true);
        gestionClient.setVisible(true);
    }//GEN-LAST:event_IHM_Menu_ClientActionPerformed

    private void IHM_Menu_ProduitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IHM_Menu_ProduitActionPerformed
        // TODO add your handling code here:
        this.dispose ();
        GestionProduit gestionProduit = new  GestionProduit(new java.awt.Frame(), true);
        gestionProduit.setVisible(true);
    }//GEN-LAST:event_IHM_Menu_ProduitActionPerformed

    private void IHM_Menu_UtiisateurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IHM_Menu_UtiisateurActionPerformed
        // TODO add your handling code here:
        this.dispose ();
        GestionUtitlisateur gestionUtitlisateur = new  GestionUtitlisateur(new java.awt.Frame(), true);
        gestionUtitlisateur.setVisible(true);
    }//GEN-LAST:event_IHM_Menu_UtiisateurActionPerformed

    private void IHM_Menu_QuitterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IHM_Menu_QuitterActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_IHM_Menu_QuitterActionPerformed

    private void IHM_ListedesclientsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IHM_ListedesclientsActionPerformed
        // TODO add your handling code here:
        this.dispose ();
        ListeClient listeclient = new  ListeClient(new java.awt.Frame(), true);
        listeclient.setVisible(true);
    }//GEN-LAST:event_IHM_ListedesclientsActionPerformed

    private void IHM_ListedesutisateursActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IHM_ListedesutisateursActionPerformed
        // TODO add your handling code here:
        this.dispose ();
        ListeProduit listeProduit = new  ListeProduit(new java.awt.Frame(), true);
        listeProduit.setVisible(true);
    }//GEN-LAST:event_IHM_ListedesutisateursActionPerformed

    private void IHM_ListedesfacturesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IHM_ListedesfacturesActionPerformed
        // TODO add your handling code here:
        this.dispose ();
        ListeFacture listeFacture = new  ListeFacture(new java.awt.Frame(), true);
        listeFacture.setVisible(true);
    }//GEN-LAST:event_IHM_ListedesfacturesActionPerformed

    private void IHM_ListedesproduitsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IHM_ListedesproduitsActionPerformed
        // TODO add your handling code here:
        this.dispose ();
        ListeProduit listeProduit = new  ListeProduit(new java.awt.Frame(), true);
        listeProduit.setVisible(true);
    }//GEN-LAST:event_IHM_ListedesproduitsActionPerformed

    private void IHM_contenuaideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IHM_contenuaideActionPerformed
        // TODO add your handling code here:
        this.dispose();
        Aide aide = new Aide (new java.awt.Frame(), true);
        aide.setVisible(true);
    }//GEN-LAST:event_IHM_contenuaideActionPerformed

    private void IHM_contactsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IHM_contactsActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this, "GBEDJISSI Jean-Pierre \n Tél : 66122572   \n jeanpierrecaleb@gmail.com");
    }//GEN-LAST:event_IHM_contactsActionPerformed

    private void IHM_Menu_FacturerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IHM_Menu_FacturerActionPerformed
        // TODO add your handling code here:
        this.dispose();
        GestionFacture gestfact = new GestionFacture(new java.awt.Frame(), true);
        gestfact.setVisible(true);
    }//GEN-LAST:event_IHM_Menu_FacturerActionPerformed

        /**
         * @param args the command line arguments
         */
        public static void main(String args[]) {
            /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
             * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
             */
            try {
                for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                    if ("Nimbus".equals(info.getName())) {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                        break;
                    }
                }
            } catch (ClassNotFoundException ex) {
                java.util.logging.Logger.getLogger(GestionFacture.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (InstantiationException ex) {
                java.util.logging.Logger.getLogger(GestionFacture.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (IllegalAccessException ex) {
                java.util.logging.Logger.getLogger(GestionFacture.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            } catch (javax.swing.UnsupportedLookAndFeelException ex) {
                java.util.logging.Logger.getLogger(GestionFacture.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }
        //</editor-fold>

            /* Create and display the dialog */
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    GestionFacture dialog = new GestionFacture(new javax.swing.JFrame(), true);
                    dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                        @Override
                        public void windowClosing(java.awt.event.WindowEvent e) {
                            System.exit(0);
                        }
                    });
                    dialog.setVisible(true);
                }
            });
        }

        public void updatecomboclient() {
            IHM_comboclient.addItem("Choisir un client");
            Query req0 = dao.em().createQuery("SELECT c FROM ClientEntite c");
            listeclient = req0.getResultList();
            for (ClientEntite c : listeclient) {
                IHM_comboclient.addItem(c.getId() + " " + c.getNom() + " " + c.getPrenom());
            }
        }

        //mise à jour liste des produits
        public void updatelisteproduit() {
            //dao.init();
            vecteur.clear();
            //Vector vecteur = new Vector();
            IHM_ListeProduit.setListData(vecteur);
            Query req = dao.em().createQuery("Select c from ProduitEntite c ");
            listeproduit = req.getResultList();
            for (ProduitEntite c : listeproduit) {
                vecteur.add(c.getId() + "  " + c.getDesignation() + " " + c.getPrix());
                IHM_ListeProduit.setListData(vecteur);

            }

        }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser IHM_DateFacture;
    private javax.swing.JButton IHM_JButton_DateFacture;
    private javax.swing.JButton IHM_JButton_Enregistrer;
    private javax.swing.JButton IHM_JButton_Imprimer;
    private javax.swing.JButton IHM_JButton_Nouveau;
    private javax.swing.JButton IHM_JButton_Quantite;
    private javax.swing.JList<String> IHM_ListeProduit;
    private javax.swing.JMenuItem IHM_Listedesclients;
    private javax.swing.JMenuItem IHM_Listedesfactures;
    private javax.swing.JMenuItem IHM_Listedesproduits;
    private javax.swing.JMenuItem IHM_Listedesutisateurs;
    private javax.swing.JMenu IHM_Menu_Aide;
    private javax.swing.JMenuItem IHM_Menu_Client;
    private javax.swing.JMenu IHM_Menu_Etats;
    private javax.swing.JMenuItem IHM_Menu_Facturer;
    private javax.swing.JMenu IHM_Menu_Operation;
    private javax.swing.JMenu IHM_Menu_Parametre;
    private javax.swing.JMenuItem IHM_Menu_Produit;
    private javax.swing.JMenuItem IHM_Menu_Quitter;
    private javax.swing.JMenuItem IHM_Menu_Utiisateur;
    private javax.swing.JButton IHM_NouveauClient;
    private javax.swing.JButton IHM_NouveauProduit;
    private javax.swing.JTextField IHM_Quantitevoulue;
    private javax.swing.JCheckBox IHM_Recu;
    private javax.swing.JComboBox IHM_comboclient;
    private javax.swing.JMenuItem IHM_contacts;
    private javax.swing.JMenuItem IHM_contenuaide;
    private javax.swing.JPanel IHM_facture;
    private javax.swing.JButton IHM_gesfac_Quitter;
    private javax.swing.JTextField IHM_gesfact_PU;
    private javax.swing.JTextField IHM_gesfact_Total;
    private javax.swing.JTable IHM_tab_acheteur;
    private javax.swing.JTable IHM_tableau_produit;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables
}
